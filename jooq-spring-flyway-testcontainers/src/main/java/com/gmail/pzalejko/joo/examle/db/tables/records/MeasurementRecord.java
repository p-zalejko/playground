/*
 * This file is generated by jOOQ.
 */
package com.gmail.pzalejko.joo.examle.db.tables.records;


import com.gmail.pzalejko.joo.examle.db.enums.Measurementunit;
import com.gmail.pzalejko.joo.examle.db.tables.Measurement;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MeasurementRecord extends UpdatableRecordImpl<MeasurementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>dev.measurement.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>dev.measurement.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>dev.measurement.value</code>.
     */
    public void setValue(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>dev.measurement.value</code>.
     */
    public BigDecimal getValue() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>dev.measurement.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>dev.measurement.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>dev.measurement.unit</code>.
     */
    public void setUnit(Measurementunit value) {
        set(3, value);
    }

    /**
     * Getter for <code>dev.measurement.unit</code>.
     */
    public Measurementunit getUnit() {
        return (Measurementunit) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementRecord
     */
    public MeasurementRecord() {
        super(Measurement.MEASUREMENT);
    }

    /**
     * Create a detached, initialised MeasurementRecord
     */
    public MeasurementRecord(Integer id, BigDecimal value, LocalDateTime timestamp, Measurementunit unit) {
        super(Measurement.MEASUREMENT);

        setId(id);
        setValue(value);
        setTimestamp(timestamp);
        setUnit(unit);
        resetChangedOnNotNull();
    }
}
