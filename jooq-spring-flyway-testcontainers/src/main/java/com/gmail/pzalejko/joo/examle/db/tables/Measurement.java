/*
 * This file is generated by jOOQ.
 */
package com.gmail.pzalejko.joo.examle.db.tables;


import com.gmail.pzalejko.joo.examle.db.Dev;
import com.gmail.pzalejko.joo.examle.db.Keys;
import com.gmail.pzalejko.joo.examle.db.enums.Measurementunit;
import com.gmail.pzalejko.joo.examle.db.tables.records.MeasurementRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Measurement extends TableImpl<MeasurementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dev.measurement</code>
     */
    public static final Measurement MEASUREMENT = new Measurement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementRecord> getRecordType() {
        return MeasurementRecord.class;
    }

    /**
     * The column <code>dev.measurement.id</code>.
     */
    public final TableField<MeasurementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dev.measurement.value</code>.
     */
    public final TableField<MeasurementRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>dev.measurement.timestamp</code>.
     */
    public final TableField<MeasurementRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>dev.measurement.unit</code>.
     */
    public final TableField<MeasurementRecord, Measurementunit> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Measurementunit.class), this, "");

    private Measurement(Name alias, Table<MeasurementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Measurement(Name alias, Table<MeasurementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>dev.measurement</code> table reference
     */
    public Measurement(String alias) {
        this(DSL.name(alias), MEASUREMENT);
    }

    /**
     * Create an aliased <code>dev.measurement</code> table reference
     */
    public Measurement(Name alias) {
        this(alias, MEASUREMENT);
    }

    /**
     * Create a <code>dev.measurement</code> table reference
     */
    public Measurement() {
        this(DSL.name("measurement"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Dev.DEV;
    }

    @Override
    public Identity<MeasurementRecord, Integer> getIdentity() {
        return (Identity<MeasurementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasurementRecord> getPrimaryKey() {
        return Keys.MEASUREMENT_PKEY;
    }

    @Override
    public Measurement as(String alias) {
        return new Measurement(DSL.name(alias), this);
    }

    @Override
    public Measurement as(Name alias) {
        return new Measurement(alias, this);
    }

    @Override
    public Measurement as(Table<?> alias) {
        return new Measurement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(String name) {
        return new Measurement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Name name) {
        return new Measurement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Table<?> name) {
        return new Measurement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement where(Condition condition) {
        return new Measurement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Measurement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Measurement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Measurement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Measurement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Measurement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
